<?php

namespace common\models;

use common\helpers\Rbac;
use common\traits\ModelMapTrait;
use Yii;
use yii\base\NotSupportedException;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\web\IdentityInterface;

/**
 * User model
 *
 * @property integer $user_id
 * @property string $username
 * @property string $password_hash
 * @property string $password_reset_token
 * @property string $verification_token
 * @property string $email
 * @property string $auth_key
 * @property integer $status
 * @property integer $created_at
 * @property integer $updated_at
 * @property string $password write-only password
 */
class User extends ActiveRecord implements IdentityInterface
{
    use ModelMapTrait;

    const
        STATUS_INACTIVE = 0,
        STATUS_ACTIVE = 1,
        STATUS_DELETED = 2,
        STATUS_BLOCKED = 3;

    public $assignedRole;
    public $password;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%user}}';
    }

    public static function getNotTakenUsersMap(Staff $staff)
    {
        $takenIds = Staff::find()->andWhere(['not in', 'user_id', $staff->user_id ?? 0])->select('user_id')->column();

        return User::find()->andWhere(['not in', 'user_id', $takenIds])->select('email')->indexBy('user_id')->column();
    }

    public static function getStatusMap(int $status = null)
    {
        $statuses = [
            self::STATUS_INACTIVE => Yii::t('lbl', 'Inactive'),
            self::STATUS_ACTIVE => Yii::t('lbl', 'Active'),
            self::STATUS_DELETED => "Usunięty",
            self::STATUS_BLOCKED => "Zablokowany",
        ];

        return $statuses[$status] ?? $status ?? $statuses;
    }

    public static function getRolesMap(string $role = null)
    {
        $roles = [
            Rbac::ROLE_ADMIN => "Administrator",
            Rbac::ROLE_USER => "Użytkownik",
            Rbac::ROLE_ROOT => "Root",
        ];

        return $roles[$role] ?? $role ?? $roles;
    }

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::class,
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            ['status', 'default', 'value' => self::STATUS_INACTIVE],
            ['status', 'in', 'range' => [self::STATUS_ACTIVE, self::STATUS_INACTIVE, self::STATUS_DELETED]],
            [['username', 'email'], 'unique'],
        ];
    }

    public function attributeLabels()
    {
        return [
            'user_id' => 'ID',
            'username' => 'Nazwa',
            'email' => 'Email',
            'status' => 'Status',
            'created_at' => Yii::t('lbl', 'Created At'),
            'updated_at' => Yii::t('lbl' , 'Updated At'),

            'assignedRole' => "Rola",
        ];
    }

    public function beforeSave($insert)
    {
        if (parent::beforeSave($insert)) {

            if ($this->getIsNewRecord()) {
                $this->generateAuthKey();

                $this->setPassword($this->password);
            }

            Rbac::assignRole($this->assignedRole, $this);

            return true;
        }

        return false;
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub

        $this->assignedRole = $this->getUserRole();
    }

    public function getUserRole()
    {
        $roleIds = AuthItem::find()->andWhere(['type' => 1])->select('name')->column();

        return AuthAssignment::find()->andWhere(['user_id' => $this->user_id])->andWhere(['in', 'item_name', $roleIds ?? []])->one()?->item_name ?? null;
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentity($id)
    {
        return static::findOne(['user_id' => $id, 'status' => self::STATUS_ACTIVE]);
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        throw new NotSupportedException('"findIdentityByAccessToken" is not implemented.');
    }

    /**
     * Finds user by username
     *
     * @param string $username
     * @return static|null
     */
    public static function findByUsername($username)
    {
        return static::findOne(['username' => $username, 'status' => self::STATUS_ACTIVE]);
    }

    /**
     * Finds user by password reset token
     *
     * @param string $token password reset token
     * @return static|null
     */
    public static function findByPasswordResetToken($token)
    {
        if (!static::isPasswordResetTokenValid($token)) {
            return null;
        }

        return static::findOne([
            'password_reset_token' => $token,
            'status' => self::STATUS_ACTIVE,
        ]);
    }

    /**
     * Finds user by verification email token
     *
     * @param string $token verify email token
     * @return static|null
     */
    public static function findByVerificationToken($token) {
        return static::findOne([
            'verification_token' => $token,
            'status' => self::STATUS_INACTIVE
        ]);
    }

    /**
     * Finds out if password reset token is valid
     *
     * @param string $token password reset token
     * @return bool
     */
    public static function isPasswordResetTokenValid($token)
    {
        if (empty($token)) {
            return false;
        }

        $timestamp = (int) substr($token, strrpos($token, '_') + 1);
        $expire = Yii::$app->params['user.passwordResetTokenExpire'];
        return $timestamp + $expire >= time();
    }

    public function getDisplayName(): string
    {
        return $this->username ?? $this->email;
    }

    public function getIsActive(): bool
    {
        return $this->status === self::STATUS_ACTIVE;
    }

    public function getIsBlocked(): bool
    {
        return $this->status === self::STATUS_BLOCKED;
    }

    /**
     * {@inheritdoc}
     */
    public function getId()
    {
        return $this->getPrimaryKey();
    }

    public function getStaffId()
    {
        return Staff::find()->andWhere(['user_id' => $this->user_id])->one()?->staff_id ?? 0;
    }

    /**
     * {@inheritdoc}
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * {@inheritdoc}
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return bool if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password_hash);
    }

    /**
     * Generates password hash from password and sets it to the model
     *
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->password_hash = Yii::$app->security->generatePasswordHash($password);
    }

    /**
     * Generates "remember me" authentication key
     */
    public function generateAuthKey()
    {
        $this->auth_key = Yii::$app->security->generateRandomString();
    }

    /**
     * Generates new password reset token
     */
    public function generatePasswordResetToken()
    {
        $this->password_reset_token = Yii::$app->security->generateRandomString() . '_' . time();
    }

    /**
     * Generates new token for email verification
     */
    public function generateEmailVerificationToken()
    {
        $this->verification_token = Yii::$app->security->generateRandomString() . '_' . time();
    }

    /**
     * Removes password reset token
     */
    public function removePasswordResetToken()
    {
        $this->password_reset_token = null;
    }
}
